////////////////////////////////////////////////////////////////////////////////
// range ///////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function range(start, end, step=1, output=[]) {
  // base
  if(start === end){
    return output;
  }

  if(step < 0 && start < end){
    return output;
  }

  // recursion
  if(output.length === 0){
    output.push(start);
  }
  output.push(start + step);
  return range(start + step, end, step, output);


}

////////////////////////////////////////////////////////////////////////////////
// sum /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function sum(array, output=0) {
  // base
  if(array.length === 0){
    return output;
  }

  // recursion
  output += array[0];
  return sum(array.slice(1), output);

}

////////////////////////////////////////////////////////////////////////////////
// reverseArray ////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArray(array, output=[]) {
  // base
  if(array.length === 0){
    return output;

  }

  // recursion

  output.unshift(array[0]);
  return reverseArray(array.slice(1), output);

}

////////////////////////////////////////////////////////////////////////////////
// reverseArrayInPlace /////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function reverseArrayInPlace(array) {
  return array.reverse()

}

////////////////////////////////////////////////////////////////////////////////
// arrayToList /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function arrayToList(array) {
  let rest = null;
  for(let i = array.length - 1; i >= 0; i--){
    rest = { value: array[i], rest: rest };
  }
  return rest;
}

////////////////////////////////////////////////////////////////////////////////
// listToArray /////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function listToArray(list, array=[]) {
  // base
  if(list.rest === null){
    array.push(list.value);
    return array;
  }
  
  // recursion
  array.push(list.value);
  
  return listToArray(list.rest, array);
  
}

////////////////////////////////////////////////////////////////////////////////
// prepend /////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function prepend(value, list) {

  let listObj = { value: value, rest: list };
  return listObj;

}

////////////////////////////////////////////////////////////////////////////////
// nth /////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function nth(list, value, count=0) {
  // base
  let nthValue;
  if(value === count){
    return list.value;
  }
  if(value < 0){
    return undefined;
  }

  // recursion
  if(value !== count){
    count++
  }

  return nth(list.rest, value, count);

}

////////////////////////////////////////////////////////////////////////////////
// deepEqual ///////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

function deepEqual(x, y) {
  // determine if x and y are NOT objects
  if(typeof x !== 'object' && typeof y !== 'object'){
    return x === y;
  }
  if(typeof x !== 'object' || typeof y !== 'object'){
    return false;
  }
  // create arrays of each inputs keys
  let xKeys = Object.keys(x);
  let yKeys = Object.keys(y);

  if(xKeys.length !== yKeys.length){
    return false;
  }

  // iterate to determine if array keys match and values at keys match

  for(let i = 0; i < xKeys.length; i++){
    if(!yKeys.includes(xKeys[i]) || !deepEqual(x[xKeys[i]], y[xKeys[i]])){
      return false;
    }
  }
  return true;
}

////////////////////////////////////////////////////////////////////////////////
// DON'T REMOVE THIS CODE //////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////

if ((typeof process !== 'undefined') &&
  (typeof process.versions.node !== 'undefined')) {
  module.exports = {
    range,
    sum,
    reverseArray,
    reverseArrayInPlace,
    arrayToList,
    listToArray,
    prepend,
    nth,
    deepEqual,
  };
};